<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - phantom.MVC.MuOnline</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/phantom.MVC.MuOnline.styles.css" asp-append-version="true" />
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">phantom.MVC.MuOnline</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Index">HOME</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Privacy">XẾP HẠNG</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Privacy">FACEBOOK</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Privacy">THƯ VIỆN</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="header"></div>
    <div class="content">
        <div class="container">
            <main role="main" class="pb-3">
                @RenderBody()
            </main>
        </div>
    </div>
    <div id="dialog" class="dialog full" style="display: none;">
        <img src="/images/loading1.gif" />
    </div>
    <div id="myModal" class="modal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">THÔNG BÁO</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Vui lòng xác nhận đồng ý các điều khoản & quy định!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    @* <button type="button" class="btn btn-primary">Save changes</button> *@
                </div>
            </div>
        </div>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - phantom.MVC.MuOnline - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/crypto-js.min.js"></script>
    @* <script src="~/js/jquery.cookie.min.js"></script> *@
    <script type="text/javascript">
        function getCookie(name) {
          const cookieString = document.cookie;
          if (!cookieString) {
            return null;
          }

          let cookieValue = null;
          $.each(cookieString.split(';'), function(index, cookie) {
            cookie = cookie.trim();
            if (cookie.startsWith(name + '=')) {
              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
              return false; // Break the loop
            }
          });
          return cookieValue;
        }
        function setCookie(name, value, days) {
          let expires = '';
          if (days) {
            let date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = '; expires=' + date.toUTCString();
          }
          document.cookie = name + '=' + encodeURIComponent(value) + expires + '; path=/';
        }
        function deleteCookie(name) {
          document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/;';
        }
        const key = "YourSecretKey123"; // 16 bytes for AES-128
        const iv = "InitVector123450"; // 16 bytes
        function encryptString(plainText, key, iv) {
              try {
                const keyBytes = CryptoJS.enc.Utf8.parse(key);
                const ivBytes = CryptoJS.enc.Utf8.parse(iv);

                const encrypted = CryptoJS.AES.encrypt(plainText, keyBytes, {
                    iv: ivBytes,
                    mode: CryptoJS.mode.CBC,
                    padding: CryptoJS.pad.Pkcs7,
                });

                const encryptedBytes = CryptoJS.enc.Base64.parse(encrypted.toString());
                const ivBytesBase64 = CryptoJS.enc.Base64.parse(CryptoJS.enc.Utf8.parse(iv).toString(CryptoJS.enc.Base64));

                const combinedBytes = new Uint8Array(ivBytesBase64.words.length * 4 + encryptedBytes.words.length * 4);
                let offset = 0;
                for (let i = 0; i < ivBytesBase64.words.length; i++) {
                    const word = ivBytesBase64.words[i];
                    combinedBytes[offset++] = (word >> 24) & 0xff;
                    combinedBytes[offset++] = (word >> 16) & 0xff;
                    combinedBytes[offset++] = (word >> 8) & 0xff;
                    combinedBytes[offset++] = word & 0xff;
                }
                for (let i = 0; i < encryptedBytes.words.length; i++) {
                    const word = encryptedBytes.words[i];
                    combinedBytes[offset++] = (word >> 24) & 0xff;
                    combinedBytes[offset++] = (word >> 16) & 0xff;
                    combinedBytes[offset++] = (word >> 8) & 0xff;
                    combinedBytes[offset++] = word & 0xff;
                }

                return CryptoJS.enc.Base64.stringify(CryptoJS.lib.WordArray.create(combinedBytes));
            } catch (error) {
                console.error("Encryption error:", error);
                return null;
            }
        }
        function setDialogText(text) {
            $('#myModal .modal-body p').text(text);
        }
        var myModal;
        $(document).ready(function() {
            myModal = new bootstrap.Modal(document.getElementById('myModal'), {
                keyboard: false
            });
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
